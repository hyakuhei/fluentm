from fluentm.entities import (
    Actor,
    Process,
    DataFlow,
    HTTP,
    Boundary,
    TLS,
    Unknown,
    Exec,
)
import fluentm.renderer as renderer

# An example using scenes to describe how the Azure ACI exploit took place

# Boundaries
azureBoundary = Boundary("Azure")
aciControlPlaneBoundary = Boundary("ACI Control Plane")
aciDataPlaneBoundary = Boundary("ACI Data Plane")
k8sControlPlaneBoundary = Boundary("K8s Control Plane")
k8sDataPlaneBoundary = Boundary("K8s Data Plane")
runCBoundary = Boundary("RunC Container Boundary")

aciControlPlaneBoundary.inBoundary(azureBoundary)
aciDataPlaneBoundary.inBoundary(azureBoundary)
k8sControlPlaneBoundary.inBoundary(aciDataPlaneBoundary)
k8sDataPlaneBoundary.inBoundary(aciDataPlaneBoundary)

researcherVmBoundary = Boundary("Researcher VM")
researcherVmBoundary.inBoundary(k8sDataPlaneBoundary)

runCBoundary.inBoundary(researcherVmBoundary)

# Entities
researcher = Actor("Researcher").inBoundary("Internet")
aciApi = Process("ACI API").inBoundary(aciControlPlaneBoundary)
kubeApi = Process("Kube-API").inBoundary(k8sControlPlaneBoundary)
bridge = Process("bridge").inBoundary(k8sControlPlaneBoundary)
kubelet = Process("Kubelet").inBoundary(researcherVmBoundary)
whoC = Process("WhoC Pod").inBoundary(runCBoundary)
breakoutPod = Process("Breakout Pod").inBoundary(runCBoundary)
rootShell = Process("RootShell").inBoundary(researcherVmBoundary)

scenes = {
    # User starts from terminal, with Azure credentials
    "Attacker looks for runtime information": [
        DataFlow(
            researcher,
            aciApi,
            TLS(HTTP("Deploy WhoC container")),
        ),
        DataFlow(
            aciApi,
            kubeApi,
            Unknown("Deploy WhoC container"),
        ),
        DataFlow(kubeApi, kubelet, Unknown("Deploy WhoC Pod")),
        DataFlow(kubelet, whoC, Exec("Deploy")),
        DataFlow(whoC, researcher, Unknown("Runtime: runc version 1.0.0-r2")),
    ],
    "Attacker deploys exploit for CVE-2019-5376": [
        DataFlow(researcher, kubeApi, TLS(HTTP("Deploy breakout pod"))),
        DataFlow(kubeApi, kubelet, Unknown("Deploy Breakout Pod")),
        DataFlow(kubelet, breakoutPod, Exec("Deploy")),
        DataFlow(breakoutPod, rootShell, Exec("Root shell")),
        DataFlow(rootShell, researcher, TLS(HTTP("Reverse shell connection"))),
    ],
    "Attacker learns about cluster": [
        DataFlow(researcher, rootShell, TLS(HTTP("cluster recon commands"))),
        DataFlow(rootShell, rootShell, Exec("Read Kubelet credentials")),
        DataFlow(rootShell, bridge, TLS(HTTP("List all pods, namespaces, nodes"))),
        DataFlow(
            bridge,
            kubeApi,
            TLS(HTTP("List all pods, namespaces, nodes")),
            response=TLS(HTTP("Cluster information")),
        ),
        DataFlow(bridge, rootShell, TLS(HTTP("Cluster information"))),
    ],
    "Attacker uses bridge ServiceAccount JWT": [
        DataFlow(researcher, rootShell, TLS(HTTP("cluster attack commands"))),
        DataFlow(
            rootShell,
            bridge,
            TLS(HTTP("Attempt 302 redirect")),
            response=TLS(HTTP("HTTP 500 - bridge JWT")),
        ),
    ],
}

if __name__ == "__main__":
    renderer.report(scenes, outputDir="aciExploit", dfdLabels=True)
